{"version":3,"sources":["../src/util.js"],"names":["_","Util","templateSrv","target","options","variableNames","variables","map","v","name","resolved","forEach","indexOf","values","getVarValues","scopedVars","newResolved","regex","RegExp","push","newTarget","replace","val","isArray","join","charAt","substring","length","split","variableExists","obj","re","test","result","d","i","text","value","tmp_str","isEmpty","exists","resolve","Object","keys","str_var","templateToStr","includes","str_var_array","result_array"],"mappings":"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","file":"util.js","sourcesContent":["import _ from 'lodash';\n\nexport class Util {\n\n  constructor(templateSrv) {\n    this.templateSrv = templateSrv;\n  }\n\n  resolve(target, options) {\n    const variableNames = (this.templateSrv.variables || []).map(v => '$' + v.name);\n    // For each variable in target, and each values of a given variable, build a resolved target string\n    let resolved = [target];\n    if (variableNames) {\n      variableNames.forEach(name => {\n        if (target.indexOf(name) >= 0) {\n          const values = this.getVarValues(name, options.scopedVars);\n          const newResolved = [];\n          const regex = new RegExp('\\\\' + name, 'g');\n          values.forEach(val => {\n            resolved.forEach(newTarget => {\n              newResolved.push(newTarget.replace(regex, val));\n            });\n          });\n          resolved = newResolved;\n        }\n      });\n    }\n    return resolved;\n  }\n\n  resolveForQL(target, options) {\n    return this.templateSrv.replace(target, options.scopedVars, values => {\n      if (_.isArray(values)) {\n        return values.map(v => `'${v}'`).join(',');\n      }\n      return `'${values}'`;\n    });\n  }\n\n  getVarValues(name, scopedVars) {\n    const values = this.templateSrv.replace(name, scopedVars);\n    // result might be in like \"{id1,id2,id3}\" (as string)\n    if (values.charAt(0) === '{') {\n        return values.substring(1, values.length-1).split(',');\n    }\n    return [values];\n  }\n\n  exists(name) {\n    return this.templateSrv.variableExists(name);\n  }\n\n  isEmpty(obj) { \n    var re = new RegExp(\"^[ ]+$\");\n    if(!obj || obj == \"null\" || obj == null || obj == \" \" || obj == \"\" \n      || obj == '\"\"' || re.test(obj) || typeof(obj) == \"undefined\"){\n      return true\n    }// 为空\n    return false; // 不为空\n  }\n\n  //将数组处理成Map对象集 \n  arrayToMap(result) {\n    return _.map(result, (d, i) => {\n      return { text: d, value: d };\n    });\n  }\n\n  //处理str模板变量数据\n  templateToStr(tmp_str){\n    if(this.isEmpty(tmp_str)){\n      return [];\n    }\n    tmp_str = this.exists(tmp_str) ? this.resolve(tmp_str, {}) : tmp_str;\n    if(\"object\" == typeof tmp_str && Object.keys(tmp_str).length){\n      tmp_str = tmp_str[0];\n    }\n    return tmp_str;\n  }\n\n  // 处理str类型字符串数组成[]类型\n  strToArray(str_var){\n    str_var = this.templateToStr(str_var);\n\n    if(str_var.includes(\"[\") || str_var.includes(\"]\")){\n      str_var = str_var.replace(\"[\", \"\").replace(\"]\", \"\");\n    }\n\n    var str_var_array = []\n    if(str_var.includes(\";\")){\n      str_var_array = str_var.split(\";\");\n    }else if(str_var.includes(\",\")){\n      str_var_array = str_var.split(\",\");\n    }else{\n      str_var_array.push(str_var);\n    }\n    var result_array = [];\n    str_var_array.forEach(i => {\n      i = this.exists(i) ? this.resolve(i, {}) : i;\n      result_array.push(i);\n    })\n\n    return result_array;\n  }\n}"]}